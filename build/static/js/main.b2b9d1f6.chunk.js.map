{"version":3,"sources":["components/SideDrawer/DrawerToggle.tsx","components/Navbar/Navbar.tsx","components/SideDrawer/SideDrawer.tsx","components/Hero.tsx","views/Home.tsx","redux/actions/selectedLocation.ts","redux/actionTypes.ts","redux/actions/map.ts","components/Map.tsx","components/LocationsList.tsx","components/SelectedListItem.tsx","views/Locations.tsx","redux/actions/images.ts","components/Accordion/Accordion.tsx","views/ExerciseInfo.tsx","components/ImageCarousel.tsx","components/LocationInfoBox.tsx","views/LocationInfo.tsx","components/Footer.tsx","components/Backdrop/Backdrop.tsx","App.tsx","redux/actions/locations.ts","redux/actions/machines.ts","serviceWorker.ts","redux/reducers/map.ts","store/configureStore.ts","redux/reducers/locations.ts","redux/reducers/selectedLocation.ts","redux/reducers/images.ts","redux/reducers/machines.ts","index.tsx"],"names":["DrawerToggle","click","className","onClick","Navbar","drawerHandler","to","SideDrawer","show","drawerClasses","Hero","Home","style","color","ghost","setLocation","id","dispatch","_getState","axios","get","then","response","type","payload","location","data","setMapParams","latitude","longitude","zoom","newMapObject","map","LocationMap","useState","lat","setLat","long","setLong","locations","useSelector","state","mapParams","useDispatch","useEffect","viewport","center","Map","onViewportChange","TileLayer","url","attribution","Marker","key","position","handleClick","Popup","name","address","LocationsList","console","log","window","innerHeight","innerWidth","SelectedListItem","selectedLocation","Locations","span","setImageData","images","Accordion","content","reps","sets","active","setActive","image","setImage","contentRef","useRef","selectedImages","destination_id","filter","length","current","maxHeight","scrollHeight","src","image_url","ref","ExerciseInfo","machines","background","width","margin","paddingTop","machine","repetitions","ImageCarousel","setLocationImagesById","draggable","LocationInfoBox","LocationInfo","useParams","Footer","Backdrop","App","sideDrawerOpen","setSideDrawerOpen","prevState","path","Boolean","hostname","match","initialMapState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b2b9d1f6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './DrawerToggle.css';\r\n\r\nconst DrawerToggle: React.FC<{ click: () => void }> = ({ click }) => {\r\n    return (\r\n        <button className=\"toggle-button\" onClick={() => click()}>\r\n            <div className=\"toggle-button_line\" />\r\n            <div className=\"toggle-button_line\" />\r\n            <div className=\"toggle-button_line\" />\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default DrawerToggle;\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport DrawerToggle from '../SideDrawer/DrawerToggle';\r\n\r\nimport './Navbar.css';\r\n\r\nconst Navbar: React.FC<{ drawerHandler: () => void }> = ({ drawerHandler }) => {\r\n    return (\r\n        <header className=\"navbar\">\r\n            <nav className=\"navbar_navigation\">\r\n                <div className=\"navbar_toggle-button\">\r\n                    <DrawerToggle click={drawerHandler} />\r\n                </div>\r\n                <div className=\"navbar_logo\"><Link to={\"/\"}></Link>ULKOFIT</div>\r\n                <div className=\"spacer\" />\r\n                <div className=\"navbar_navigation-items\">\r\n                    <ul>\r\n                        <Link to=\"/\"><li>Aloitus</li></Link>\r\n                        <Link to=\"/locations\"><li>Sijainnit</li></Link>\r\n                        <Link to=\"/exerciseinfo\"><li>Liikeohjeet</li></Link>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './SideDrawer.css';\r\n\r\nconst SideDrawer: React.FC<{ show: boolean; click: () => void }> = ({ show, click }) => {\r\n\r\n    let drawerClasses = 'side-drawer';\r\n    if (show) {\r\n        drawerClasses = 'side-drawer open';\r\n    }\r\n    return (\r\n        <ul className={drawerClasses}>\r\n            <Link to={\"/\"} onClick={() => click()}><li>Aloitus</li></Link>\r\n            <Link to={\"/locations\"} onClick={() => click()}><li>Sijainnit</li></Link>\r\n            <Link to={\"/exerciseinfo\"} onClick={() => click()}><li>Liikeohjeet</li></Link>\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default SideDrawer;\r\n","import React from 'react';\r\nimport '../styles/header.css';\r\n\r\nconst Hero: React.FC = () => {\r\n    return (\r\n        <div className=\"hero-image\">\r\n            <div className=\"hero-container\">\r\n                <h1 className=\"hero-text\">LIIKKUVATURKU</h1>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Hero;\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport Hero from '../components/Hero';\r\nimport { Button } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home: React.FC = () => {\r\n    return (\r\n        <div className=\"content\">\r\n            <Hero />\r\n            <div className=\"card\">\r\n                <h1 style={{ color: \"white\" }}>Liikkumista ulkolaitteilla</h1>\r\n                <p>Ympäri Turun kaupunkia sijaitsevat ulkokuntolaitteet ovat mainio tapa kasvattaa ja ylläpitää lihaskuntoa.\r\n                liikkuvaturku.fi avulla löydät laitteiden sijainnit helposti kartalta laadukkailla kuvilla varustettuna.\r\n                </p>\r\n                <Link to={\"/locations\"}><Button ghost className=\"button\">Etsi lähimmät ulkokuntoilulaitteet</Button></Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import { Location } from '../../types';\r\nimport { AppActions, SET_SELECTED_LOCATION } from '../actionTypes';\r\nimport { Dispatch } from \"redux\";\r\nimport { AppState } from '../../store/configureStore';\r\nimport axios from 'axios';\r\n\r\nexport const setLocationData = (location: Location): AppActions => ({\r\n    type: SET_SELECTED_LOCATION,\r\n    payload: {\r\n        location\r\n    }\r\n});\r\n\r\nexport const setLocation = (id: string) => {\r\n\r\n    return (dispatch: Dispatch<AppActions>, _getState: () => AppState) => {\r\n        axios.get<Location[]>(`http://localhost:3003/api/locations/${id}`).then((response) => {\r\n            dispatch(setLocationData(response.data[0]));\r\n        });\r\n    };\r\n};","import { Location, Image, Map, Machine } from '../types';\r\n\r\n// Actions types for all locations.\r\nexport const SET_LOCATIONS = \"GET_LOCATIONS\";\r\n\r\nexport interface SetLocationsAction {\r\n    type: typeof SET_LOCATIONS;\r\n    payload: {\r\n        locations: Location[];\r\n    };\r\n}\r\n\r\nexport type LocationActions = SetLocationsAction;\r\n\r\n\r\n// Action types for selected location.\r\nexport const SET_SELECTED_LOCATION = \"SET_SELECTED_LOCATION\";\r\n\r\n\r\nexport interface SetSelectedLocationAction {\r\n    type: typeof SET_SELECTED_LOCATION;\r\n    payload: {\r\n        location: Location;\r\n    };\r\n}\r\n\r\nexport type SelectedLocationActions = SetSelectedLocationAction;\r\n\r\n// Action types for image URLS.\r\nexport const SET_IMAGES = \"SET_IMAGES\";\r\n\r\nexport interface SetImageAction {\r\n    type: typeof SET_IMAGES;\r\n    payload: {\r\n        images: Image[];\r\n    };\r\n}\r\n\r\nexport type ImageActions = SetImageAction;\r\n\r\n// Action types for map parameters\r\nexport const SET_MAP = \"SET_MAP\";\r\n\r\nexport interface SetMapActions {\r\n    type: typeof SET_MAP;\r\n    payload: {\r\n        map: Map;\r\n    };\r\n}\r\n\r\nexport type MapActions = SetMapActions;\r\n\r\n// Action types for excercise machines\r\nexport const SET_MACHINES = \"SET_MACHINE\";\r\n\r\nexport interface SetMachineActions {\r\n    type: typeof SET_MACHINES;\r\n    payload: {\r\n        machines: Machine[];\r\n    };\r\n}\r\n\r\nexport type MachineActions = SetMachineActions;\r\n\r\n// All actions\r\nexport type AppActions = LocationActions | SelectedLocationActions | ImageActions | MapActions | MachineActions;","import { Map } from '../../types';\r\nimport { AppActions, SET_MAP } from '../actionTypes';\r\nimport { Dispatch } from \"redux\";\r\nimport { AppState } from '../../store/configureStore';\r\n\r\nexport const setMapData = (map: Map): AppActions => ({\r\n    type: SET_MAP,\r\n    payload: {\r\n        map\r\n    }\r\n});\r\n\r\n\r\nexport const setMapParams = (latitude: number, longitude: number, zoom: number) => {\r\n    const newMapObject: Map = {\r\n        latitude,\r\n        longitude,\r\n        zoom\r\n    };\r\n    return (dispatch: Dispatch<AppActions>, _getState: () => AppState) => {\r\n\r\n        dispatch(setMapData(newMapObject));\r\n    };\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Map, Marker, Popup, TileLayer, Viewport } from 'react-leaflet';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../types';\r\nimport { setLocation } from '../redux/actions/selectedLocation';\r\nimport { setMapParams } from '../redux/actions/map';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport '../styles/locations-view.css';\r\n\r\nconst LocationMap: React.FC = () => {\r\n\r\n    const [lat, setLat] = useState(60.454510);\r\n    const [long, setLong] = useState(22.264824);\r\n\r\n    let zoom = 13;\r\n\r\n    const selectLocations = (state: RootState) => state.locations;\r\n    const selectMapParams = (state: RootState) => state.map;\r\n\r\n    const locations = useSelector(selectLocations);\r\n    const mapParams = useSelector(selectMapParams);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setLat(mapParams.latitude);\r\n        setLong(mapParams.longitude);\r\n    }, [mapParams]);\r\n\r\n    const handleClick = (id: string, lat: number, long: number) => {\r\n        dispatch(setLocation(id));\r\n        dispatch(setMapParams(lat, long, zoom));\r\n    };\r\n    const viewport: Viewport = {\r\n        center: [lat, long],\r\n        zoom: mapParams.zoom,\r\n    };\r\n\r\n    const getZoom = (viewport: Viewport) => {\r\n        if (viewport.zoom && viewport.zoom !== null)\r\n            zoom = viewport.zoom;\r\n    };\r\n    return (\r\n        <div className=\"map-container\">\r\n            <Map viewport={viewport} onViewportChange={getZoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n                />\r\n                {locations.map(location =>\r\n                    <Marker\r\n                        key={location.id}\r\n                        position={[location.latitude, location.longitude]}\r\n                        onClick={() => handleClick(location.id, location.latitude, location.longitude)}\r\n                    >\r\n                        <Popup>\r\n                            <p><b>Nimi:</b> {location.name}</p>\r\n                            <p><b>Osoite:</b> {location.address}</p>\r\n                            <Link to={`/locations/${location.id}`}>\r\n                                <p className=\"info-item\">Katso kuvat täältä</p>\r\n                            </Link>\r\n                        </Popup>\r\n\r\n                    </Marker>\r\n                )}\r\n            </Map>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LocationMap;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setLocation } from '../redux/actions/selectedLocation';\r\nimport { setMapParams } from '../redux/actions/map';\r\nimport { RootState } from '../types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport '../styles/locations-view.css';\r\n\r\nconst LocationsList: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const selectLocations = (state: RootState) => state.locations;\r\n    const locations = useSelector(selectLocations);\r\n\r\n\r\n    const handleClick = (id: string, latitude: number, longitude: number) => {\r\n        dispatch(setLocation(id));\r\n        dispatch(setMapParams(latitude, longitude, 14));\r\n    };\r\n    console.log(window.innerHeight);\r\n    if (!locations) {\r\n        return null;\r\n    }\r\n    // Mobile\r\n    else if (window.innerWidth < 700) {\r\n        return (\r\n            <div className=\"list-container-mobile\">\r\n                <h1>Ulkoliikuntalaitteet</h1>\r\n                <ul className=\"list\">\r\n                    {locations.map(location =>\r\n                        <Link to={`/locations/${location.id}`} key={location.id}>\r\n                            <li className=\"list-item\">{location.name}\r\n                            </li>\r\n                        </Link>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n    // Desktop\r\n    return (\r\n        <div className=\"list-container\">\r\n            <h1>Ulkoliikuntalaitteet</h1>\r\n            <ul className=\"list\">\r\n                {locations.map(location =>\r\n                    <li\r\n                        onClick={() => handleClick(location.id, location.latitude, location.longitude)}\r\n                        key={location.id}\r\n                        className=\"list-item\">\r\n                        {location.name}\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LocationsList;","import React from 'react';\r\nimport { RootState } from '../types';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport '../styles/locations-view.css';\r\n\r\nconst SelectedListItem: React.FC = () => {\r\n\r\n    const selectLocations = (state: RootState) => state.selectedLocation;\r\n    const selectedLocation = useSelector(selectLocations);\r\n\r\n    return (\r\n        <div className=\"selected-item-container\">\r\n            <h1>Valittu sijainti</h1>\r\n            <div className=\"info-box\">\r\n                {selectedLocation === null || !selectedLocation\r\n                    ?\r\n                    <div>\r\n                        <br />\r\n                        <h3 style={{ color: \"white\" }}>Valitse sijainti kartalta tai listalta</h3>\r\n                        <br />\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <p className=\"info-item\"><b>Nimi:</b> {selectedLocation.name}</p>\r\n                        <p className=\"info-item\"><b>Osoite:</b> {selectedLocation.address}</p>\r\n                        <p className=\"info-item\"><b>Laitteet: </b>Ylätalja, punnerruslaite, dippitanko</p>\r\n                        <Link to={`/locations/${selectedLocation.id}`}>\r\n                            <p className=\"info-item\">Katso kuvat täältä</p>\r\n                        </Link>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectedListItem;","import React from 'react';\r\nimport '../App.css';\r\nimport { Row, Col } from 'antd';\r\nimport LocationMap from '../components/Map';\r\nimport LocationsList from '../components/LocationsList';\r\nimport SelectedListItem from '../components/SelectedListItem';\r\n\r\nconst Locations: React.FC = () => {\r\n\r\n    if (window.innerWidth < 700) {\r\n        return (\r\n            <div className=\"content\">\r\n                <LocationMap />\r\n                <LocationsList />\r\n\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"content\">\r\n            <LocationMap />\r\n            <Row>\r\n                <Col span={12}>\r\n                    <LocationsList />\r\n                </Col>\r\n                <Col span={12}>\r\n                    <SelectedListItem />\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Locations;","import { Image } from '../../types';\r\nimport { AppActions, SET_IMAGES } from '../actionTypes';\r\nimport { Dispatch } from \"redux\";\r\nimport { AppState } from '../../store/configureStore';\r\nimport axios from 'axios';\r\n\r\nexport const setImageData = (images: Image[]): AppActions => ({\r\n    type: SET_IMAGES,\r\n    payload: {\r\n        images\r\n    }\r\n});\r\n\r\n\r\nexport const setMachineImages = () => {\r\n    return (dispatch: Dispatch<AppActions>, _getState: () => AppState) => {\r\n        axios.get<Image[]>('http://localhost:3003/api/images/machines').then((response) => {\r\n            dispatch(setImageData(response.data));\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const setLocationImagesById = (id: string) => {\r\n    return (dispatch: Dispatch<AppActions>, _getState: () => AppState) => {\r\n        axios.get<Image[]>(`http://localhost:3003/api/images/locations/${id}`).then((response) => {\r\n            dispatch(setImageData(response.data));\r\n        });\r\n    };\r\n};","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setMachineImages } from '../../redux/actions/images';\r\nimport { RootState, Image } from '../../types';\r\n\r\nimport './Accordion.css';\r\n\r\nconst Accordion: React.FC<{ id: string; name: string; content: string; reps: string; sets: string }> = ({ id, name, content, reps, sets }) => {\r\n    const [active, setActive] = useState(false);\r\n    const [image, setImage] = useState<Image | null>(null);\r\n    const contentRef = useRef<HTMLDivElement>(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // Set all images of excercise machines to redux\r\n    useEffect(() => {\r\n        dispatch(setMachineImages());\r\n    }, [dispatch]);\r\n\r\n    // Get the images from redux\r\n    const selectImages = (state: RootState) => state.images;\r\n    const selectedImages = useSelector(selectImages);\r\n\r\n    useEffect(() => {\r\n        selectedImages.map(image => console.log(image.destination_id));\r\n        setImage(selectedImages.filter(image => image.destination_id === id)[0]);\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (selectedImages.length !== 0) {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            contentRef.current!.style.maxHeight = active ? `${contentRef.current!.scrollHeight}px` : '0px';\r\n        }\r\n    }, [contentRef, active, selectedImages]);\r\n\r\n    const toggleActive = () => {\r\n        setActive(!active);\r\n    };\r\n\r\n    if (selectedImages.length === 0 && image === null && !image) return null;\r\n    return (\r\n        <div className=\"menu-container\">\r\n            <button\r\n                onClick={toggleActive}\r\n                className=\"menu_item-button\"><img className=\"accordion_item-image\" src={image?.image_url} />{name}</button>\r\n            <div className=\"menu_item-content\" ref={contentRef}>\r\n                <h4 style={{ color: \"white\" }}>Liikeohjeet:</h4>\r\n                <p>\r\n                    {content}\r\n                </p>\r\n                <h4 style={{ color: \"white\" }}>Liikemäärä:</h4>\r\n                <p>Tee {reps} toistoa ja {sets} settiä. Pidä settien välissä 30-60 sekunnin lepotauko.</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Accordion;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../types';\r\nimport Accordion from '../components/Accordion/Accordion';\r\n\r\n\r\nconst ExerciseInfo: React.FC = () => {\r\n    const selectMachines = (state: RootState) => state.machines;\r\n    const machines = useSelector(selectMachines);\r\n\r\n    return (\r\n        <div className=\"content\" style={{ background: \"rgba(255, 255, 255, 0.171)\", width: \"80%\", margin: \"1% 10%\" }}>\r\n            <h1 style={{ paddingTop: \"2%\" }}>Valitse laite</h1>\r\n            {machines.map(machine =>\r\n                <Accordion\r\n                    key={machine.id}\r\n                    id={machine.id}\r\n                    name={machine.name}\r\n                    content={machine.content}\r\n                    reps={machine.repetitions}\r\n                    sets={machine.sets}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExerciseInfo;","import React, { useEffect } from 'react';\r\nimport { Carousel } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setLocationImagesById } from '../redux/actions/images';\r\nimport { RootState } from '../types';\r\n\r\nimport '../styles/locationInfo-view.css';\r\n\r\nconst ImageCarousel: React.FC<{ id: string }> = ({ id }) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setLocationImagesById(id));\r\n    }, [dispatch, id]);\r\n\r\n    const selectImages = (state: RootState) => state.images;\r\n    const selectedImages = useSelector(selectImages);\r\n\r\n    if (selectedImages.length === 0 || !selectedImages) return null;\r\n    return (\r\n        <Carousel draggable={true}>\r\n            <div className=\"img-container\">\r\n                <img src={selectedImages[0].image_url} />\r\n            </div>\r\n            <div className=\"img-container\">\r\n                <img src={selectedImages[1].image_url} />\r\n            </div>\r\n        </Carousel>\r\n    );\r\n};\r\n\r\nexport default ImageCarousel;","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setLocation } from '../redux/actions/selectedLocation';\r\nimport { RootState } from '../types';\r\nimport { Button } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport '../styles/locationInfo-view.css';\r\n\r\nconst LocationInfoBox: React.FC<{ id: string }> = ({ id }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(setLocation(id));\r\n    }, [dispatch]);\r\n\r\n    const selectLocations = (state: RootState) => state.selectedLocation;\r\n    const selectedLocation = useSelector(selectLocations);\r\n\r\n    if (selectedLocation === null || !selectedLocation) return null;\r\n    return (\r\n        <div>\r\n            <h1>{selectedLocation.name}</h1>\r\n            <p className=\"info-text\">Osoite: {selectedLocation.address}</p>\r\n            <Link to={`/locations`}><Button ghost className=\"button\">Takaisin</Button></Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LocationInfoBox;","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { ParamTypes } from '../types';\r\nimport ImageCarousel from '../components/ImageCarousel';\r\nimport LocationInfoBox from '../components/LocationInfoBox';\r\n\r\nimport '../styles/locationInfo-view.css';\r\n\r\nconst LocationInfo: React.FC = () => {\r\n\r\n    const { id } = useParams<ParamTypes>();\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"container\">\r\n                <ImageCarousel id={id} />\r\n                <LocationInfoBox id={id} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LocationInfo;","import React from 'react';\r\nimport '../App.css';\r\n\r\nconst Footer: React.FC = () => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"footer-inner\">\r\n                <p>Copyright 2020 © All rights reserved</p>\r\n                <p>Contact Email joona.uutela@gmail.com</p>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\n\r\nimport './Backdrop.css';\r\n\r\nconst Backdrop: React.FC<{ click: () => void }> = ({ click }) => {\r\n    return (\r\n        <div className=\"backdrop\" onClick={() => click()} />\r\n    );\r\n};\r\n\r\nexport default Backdrop;\r\n","import './App.css';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport SideDrawer from './components/SideDrawer/SideDrawer';\r\nimport Home from './views/Home';\r\nimport Locations from './views/Locations';\r\nimport ExerciseInfo from './views/ExerciseInfo';\r\nimport LocationInfo from './views/LocationInfo';\r\nimport Footer from './components/Footer';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch, Route\r\n} from \"react-router-dom\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { setLocations } from './redux/actions/locations';\r\nimport Backdrop from './components/Backdrop/Backdrop';\r\nimport { setMachines } from './redux/actions/machines';\r\n\r\nconst App: React.FC = () => {\r\n\r\n    const [sideDrawerOpen, setSideDrawerOpen] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setLocations());\r\n        dispatch(setMachines());\r\n    }, [dispatch]);\r\n\r\n\r\n    // TODO: seperate navbar functionality and components into its own component\r\n    const drawerHandler = (): void => {\r\n        setSideDrawerOpen(prevState => !prevState);\r\n    };\r\n\r\n    const backdropHandler = (): void => {\r\n        setSideDrawerOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <Navbar drawerHandler={drawerHandler} />\r\n                <SideDrawer show={sideDrawerOpen} click={drawerHandler} />\r\n                {sideDrawerOpen &&\r\n                    <Backdrop click={backdropHandler} />\r\n                }\r\n                <Switch>\r\n                    <Route path=\"/locations/:id\">\r\n                        <LocationInfo />\r\n                    </Route>\r\n                    <Route path=\"/locations\">\r\n                        <Locations />\r\n                    </Route>\r\n                    <Route path=\"/exerciseinfo\">\r\n                        <ExerciseInfo />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <Home />\r\n                    </Route>\r\n                </Switch>\r\n                <Footer />\r\n            </div>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;","import { Location } from '../../types';\r\nimport { AppActions, SET_LOCATIONS } from '../actionTypes';\r\nimport { Dispatch } from \"redux\";\r\nimport { AppState } from '../../store/configureStore';\r\nimport axios from 'axios';\r\n\r\nexport const setLocationData = (locations: Location[]): AppActions => ({\r\n    type: SET_LOCATIONS,\r\n    payload: {\r\n        locations\r\n    }\r\n});\r\n\r\nexport const setLocations = () => {\r\n    return (dispatch: Dispatch<AppActions>, _getState: () => AppState) => {\r\n        axios.get<Location[]>('http://localhost:3003/api/locations').then((response) => {\r\n            dispatch(setLocationData(response.data));\r\n        });\r\n    };\r\n};","import { Machine } from '../../types';\r\nimport { AppActions, SET_MACHINES } from '../actionTypes';\r\nimport { Dispatch } from \"redux\";\r\nimport { AppState } from '../../store/configureStore';\r\nimport axios from 'axios';\r\n\r\nexport const setLocationData = (machines: Machine[]): AppActions => ({\r\n    type: SET_MACHINES,\r\n    payload: {\r\n        machines\r\n    }\r\n});\r\n\r\nexport const setMachines = () => {\r\n    return (dispatch: Dispatch<AppActions>, _getState: () => AppState) => {\r\n        axios.get<Machine[]>('http://localhost:3003/api/machines').then((response) => {\r\n            dispatch(setLocationData(response.data));\r\n        });\r\n    };\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Map } from '../../types';\r\nimport { MapActions, SET_MAP } from '../actionTypes';\r\n\r\nconst initialMapState: Map = {\r\n    latitude: 60.454510,\r\n    longitude: 22.264824,\r\n    zoom: 12\r\n\r\n};\r\n\r\nconst mapReducer = (state: Map = initialMapState, action: MapActions): Map => {\r\n    switch (action.type) {\r\n        case SET_MAP:\r\n            console.log(action.payload.map);\r\n            return action.payload.map;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport { mapReducer };","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\r\nimport { locationReducer } from '../redux/reducers/locations';\r\nimport { selectedLocationReducer } from '../redux/reducers/selectedLocation';\r\nimport { imageReducer } from '../redux/reducers/images';\r\nimport { mapReducer } from '../redux/reducers/map';\r\nimport { machineReducer } from '../redux/reducers/machines';\r\n\r\nimport { AppActions } from '../redux/actionTypes';\r\n\r\nexport const rootReducer = combineReducers({\r\n    locations: locationReducer,\r\n    selectedLocation: selectedLocationReducer,\r\n    images: imageReducer,\r\n    map: mapReducer,\r\n    machines: machineReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk as ThunkMiddleware<AppState, AppActions>));","import { Location } from '../../types';\r\nimport { LocationActions, SET_LOCATIONS } from '../actionTypes';\r\n\r\nconst locationReducer = (state: Location[] = [], action: LocationActions): Location[] => {\r\n    switch (action.type) {\r\n        case SET_LOCATIONS:\r\n            return [...state, ...action.payload.locations];\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport { locationReducer };","import { Location } from '../../types';\r\nimport { SelectedLocationActions, SET_SELECTED_LOCATION } from '../actionTypes';\r\n\r\nconst selectedLocationReducer = (state: Location | null = null, action: SelectedLocationActions) => {\r\n    switch (action.type) {\r\n        case SET_SELECTED_LOCATION:\r\n            return action.payload.location;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport { selectedLocationReducer };","import { Image } from '../../types';\r\nimport { ImageActions, SET_IMAGES } from '../actionTypes';\r\n\r\nconst imageReducer = (state: Image[] = [], action: ImageActions): Image[] => {\r\n    switch (action.type) {\r\n        case SET_IMAGES:\r\n            return [...action.payload.images];\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport { imageReducer };","import { Machine } from '../../types';\r\nimport { MachineActions, SET_MACHINES } from '../actionTypes';\r\n\r\nconst machineReducer = (state: Machine[] = [], action: MachineActions): Machine[] => {\r\n    switch (action.type) {\r\n        case SET_MACHINES:\r\n            return [...state, ...action.payload.machines];\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport { machineReducer };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './store/configureStore';\n\nconsole.log(store.getState());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />,\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}